# -*- coding: utf-8 -*-conda list
"""
Ã‰diteur de Spyder

Ceci est un script temporaire.
"""

#%%Exercises sheet 1
#%%Ex A

def match_ends(words):
    count=0
    for word in words:
        if len(word)>1: 
            if word[0]==word[len(word)-1]:
                count=count+1
   
    return count

n=["aa", "tree", "cat"]

print match_ends(n)


#%%Ex B
def front_x(words):
    list1 = []
    list2 = []
    for word in words:
        if word[0]=="x":
            list1.append(word)
        else:
            list2.append(word)
    list1.sort();
    list2.sort();
    return list1 + list2
    
m = ["aa", "tree", "czt","xacv", "xlc","cat"]

print front_x(m)


#%%Ex C
def sort_last(tuples):
    def lastelement(item):
        return item[-1]
    tuples.sort(key = lastelement)
    
    return tuples

o = [(1, 7), (1, 3), (3, 4, 5), (2, 2), (8,1)]
print sort_last(o)

def test(got, expected):
    prefix = 'OK' if got == expected else ' X'
    # !r prints a Python representation of the strings (complete with quotes)
    print ' {} got: {!r} expected: {!r}'.format(prefix, got, expected)

def main():
    print 'match_ends'
    test(match_ends(['aba', 'xyz', 'aa', 'x', 'bbb']), 3)
    test(match_ends(['', 'x', 'xy', 'xyx', 'xx']), 2)
    test(match_ends(['aaa', 'be', 'abc', 'hello']), 1)

    print
    print 'front_x'
    test(front_x(['bbb', 'ccc', 'axx', 'xzz', 'xaa']),
        ['xaa', 'xzz', 'axx', 'bbb', 'ccc'])
    test(front_x(['ccc', 'bbb', 'aaa', 'xcc', 'xaa']),
        ['xaa', 'xcc', 'aaa', 'bbb', 'ccc'])
    test(front_x(['mix', 'xyz', 'apple', 'xanadu', 'aardvark']),
        ['xanadu', 'xyz', 'aardvark', 'apple', 'mix'])
    
    print
    print 'sort_last'
    test(sort_last([(1, 3), (3, 2), (2, 1)]),
         [(2, 1), (3, 2), (1, 3)])
    test(sort_last([(2, 3), (1, 2), (3, 1)]),
         [(3, 1), (1, 2), (2, 3)])
    test(sort_last([(1, 7), (1, 3), (3, 4, 5), (2, 2)]),
         [(2, 2), (1, 3), (3, 4, 5), (1, 7)])

 
main()


#%%Ex D
def remove_adjacent(nums):
    setnums = set(nums)
    
    return setnums
    
p = (1,1,3,2,3,3,4,5,2,2,7)  
print remove_adjacent(p)  

#%%Ex E

def linear_merge(list1, list2):
    list = list1 + list2
    list.sort()
        
    return list
q = [1, 3, 5]
r = [2, 4, 6]
print linear_merge(q,r)

def main():
    print 'remove_adjacent'
    test(remove_adjacent([1, 2, 2, 3]), [1, 2, 3])
    test(remove_adjacent([2, 2, 3, 3, 3]), [2, 3])
    test(remove_adjacent([]), [])

    print
    print 'linear_merge'
    test(linear_merge(['aa', 'xx', 'zz'], ['bb', 'cc']),
        ['aa', 'bb', 'cc', 'xx', 'zz'])
    test(linear_merge(['aa', 'xx'], ['bb', 'cc', 'zz']),
        ['aa', 'bb', 'cc', 'xx', 'zz'])
    test(linear_merge(['aa', 'aa'], ['aa', 'bb', 'bb']),
        ['aa', 'aa', 'aa', 'bb', 'bb'])
    
    main()

#Exercises sheet 2

#%%Ex A
def donuts(count):
    if count>10:
        cake = 'many'
    else: cake = str(count)
    return 'number of donuts: '+ cake
    
print donuts(9)

#%%Ex B
def both_ends(s):
    result=""
    if len(s)>1:
        result=s[:2]+s[len(s)-2:]
        
    return result

print both_ends("Camille loves tarts")

#%%Ex C
def fix_start(s):
    result=""
    if len(s)>1:
        result = s[0] + s[1:].replace(s[0], '*')
    
    return result
    
print fix_start('cutie the cuddly cat')

#%%Ex D

def mix_up(a, b):
    result=""
    if len(a)>1 and len(b)>1:
        result = b[:2]+a[2:]+" "+a[:2]+b[2:]
    return result
    
print mix_up('dogs', 'birds')

def test(got, expected):
    prefix = 'OK' if got == expected else ' X'
    # !r prints a Python representation of the strings (complete with quotes)
    print ' {} got: {!r} expected: {!r}'.format(prefix, got, expected)

def main():
    print 'donuts'
    # Each line calls donuts, compares its result to the expected for that call.
    test(donuts(4), 'Number of donuts: 4')
    test(donuts(9), 'Number of donuts: 9')
    test(donuts(10), 'Number of donuts: many')
    test(donuts(99), 'Number of donuts: many')

    print
    print 'both_ends'
    test(both_ends('spring'), 'spng')
    test(both_ends('Hello'), 'Helo')
    test(both_ends('a'), '')
    test(both_ends('xyz'), 'xyyz')

  
    print
    print 'fix_start'
    test(fix_start('babble'), 'ba**le')
    test(fix_start('aardvark'), 'a*rdv*rk')
    test(fix_start('google'), 'goo*le')
    test(fix_start('donut'), 'donut')

    print
    print 'mix_up'
    test(mix_up('mix', 'pod'), 'pox mid')
    test(mix_up('dog', 'dinner'), 'dig donner')
    test(mix_up('gnash', 'sport'), 'spash gnort')
    test(mix_up('pezzy', 'firm'), 'fizzy perm')


#%%Ex E


def verbing(s):
    result = s
    if len(s)>3:
        if s[-3:]=="ing":
            result = s + "ly"
        else:
            result = s + "ing"
        
    return result
    
print verbing('duck')
print verbing('duckling')

#%%Ex F

def not_bad(s):
    result = s
    if len(s)>6:
        for i in range(0,len(s)):
            if s[i:i+3]=="not":
                for j in range (i+3, len(s)):
                    if s[j:j+3]=="bad":
                        result = s[:i] + "good" +s[j+3:]
    
    return result

print not_bad("victor is not antoine's friend, too bad !")

#%%Ex G

def front_back(a, b):
    if len(a)>1 and len(b)>1:
        result = [a[:int(len(a)+1)/2]+b[:int(len(b)+1)/2]+a[int(len(a)+1)/2:]+b[int(len(b)+1)/2:]]
    return result
    
print front_back("cat","dog")

def main():
    print 'verbing'
    test(verbing('hail'), 'hailing')
    test(verbing('swiming'), 'swimingly')
    test(verbing('do'), 'do')
    
    print
    print 'not_bad'
    test(not_bad('This movie is not so bad'), 'This movie is good')
    test(not_bad('This dinner is not that bad!'), 'This dinner is good!')
    test(not_bad('This tea is not hot'), 'This tea is not hot')
    test(not_bad("It's bad yet not"), "It's bad yet not")

    print
    print 'front_back'
    test(front_back('abcd', 'xy'), 'abxcdy')
    test(front_back('abcde', 'xyz'), 'abcxydez')
    test(front_back('Kitten', 'Donut'), 'KitDontenut')

main()  
